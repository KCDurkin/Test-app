import streamlit as st
import numpy as np
import pandas as pd
import yfinance as yf
from scipy import stats
import matplotlib.pyplot as plt
from scipy.stats import norm
from fredapi import Fred
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Union, Tuple
from dataclasses import dataclass
import logging
from py_vollib.black_scholes.implied_volatility import implied_volatility
from py_vollib.black_scholes import black_scholes
from py_vollib.black_scholes.greeks.analytical import delta, gamma, theta, vega, rho
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class StockAnalysisConfig:
    """Configuration class for stock analysis parameters"""
    fred_api_key: str
    default_risk_free_rate: float = 0.07
    volatility_window: int = 30
    trading_days_per_year: int = 252
    default_period: str = '1y'

class MarketDataProvider:
    """Class to handle market data retrieval"""
    def __init__(self, config: StockAnalysisConfig):
        self.config = config
        self._fred = None

    @property
    def fred(self) -> Fred:
        """Lazy initialization of FRED client"""
        if self._fred is None:
            self._fred = Fred(api_key=self.config.fred_api_key)
        return self._fred

    def get_risk_free_rate(self, country: str = 'India') -> float:
        """Fetch current risk-free rate based on selected country"""
        try:
            if country == 'USA':
                yield_series = 'IRLTLT01USM156N'
            elif country == 'India':
                yield_series = 'INDIRLTLT01STM'
            else:
                logger.warning(f"Unsupported country: {country}, defaulting to India")
                yield_series = 'INDIRLTLT01STM'

            yield_data = self.fred.get_series(yield_series)
            return float(yield_data.iloc[-1]) / 100
        except Exception as e:
            logger.warning(f"Failed to fetch risk-free rate: {e}")
            return self.config.default_risk_free_rate

    def get_stock_data(self, ticker: str, period: str) -> Optional[pd.DataFrame]:
        """Fetch stock data with error handling"""
        try:
            stock = yf.Ticker(ticker)
            data = stock.history(period=period)
            if data.empty:
                logger.warning(f"No data available for {ticker}")
                return None
            return data
        except Exception as e:
            logger.error(f"Error fetching data for {ticker}: {e}")
            return None

class StockAnalyzer:
    """Main class for stock analysis"""
    def __init__(self, config: StockAnalysisConfig):
        self.config = config
        self.market_data = MarketDataProvider(config)

    def calculate_returns_metrics(self, price_data: pd.Series, country: str = 'India') -> Tuple[float, float, float]:
        """Calculate annualized return metrics"""
        returns = price_data.pct_change().dropna()
        annual_return = returns.mean() * self.config.trading_days_per_year
        annual_volatility = returns.std() * np.sqrt(self.config.trading_days_per_year)
        risk_free_rate = self.market_data.get_risk_free_rate(country)
        sharpe_ratio = (annual_return - risk_free_rate) / annual_volatility
        return sharpe_ratio, annual_return, annual_volatility

    def calculate_volatility(self, price_data: pd.Series) -> Tuple[pd.Series, plt.Figure]:
        """Calculate historical volatility and create distribution plot"""
        returns = price_data.pct_change().dropna()
        hist_volatility = returns.rolling(window=self.config.volatility_window).std() * \
                         np.sqrt(self.config.trading_days_per_year)

        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 6))
        
        # Returns distribution
        returns.hist(bins=50, density=True, alpha=0.7, ax=ax1)
        mu, sigma = stats.norm.fit(returns)
        x = np.linspace(returns.min(), returns.max(), 100)
        ax1.plot(x, norm.pdf(x, mu, sigma), 'r-', lw=2, label='Normal Fit')
        ax1.set_title('Returns Distribution')
        ax1.set_xlabel('Returns')
        ax1.set_ylabel('Frequency')
        ax1.legend()

        # Volatility over time
        hist_volatility.plot(ax=ax2)
        ax2.set_title('Historical Volatility')
        ax2.set_xlabel('Date')
        ax2.set_ylabel('Volatility')

        # Historical Volatility Distribution
        hist_volatility.dropna().hist(bins=50, density=True, alpha=0.7, ax=ax3)
        mu_vol, sigma_vol = stats.norm.fit(hist_volatility.dropna())
        x_vol = np.linspace(hist_volatility.min(), hist_volatility.max(), 100)
        ax3.plot(x_vol, norm.pdf(x_vol, mu_vol, sigma_vol), 'r-', lw=2, label='Normal Fit')
        ax3.set_title('Historical Volatility Distribution')
        ax3.set_xlabel('Volatility')
        ax3.set_ylabel('Frequency')
        ax3.legend()

        plt.tight_layout()
        return hist_volatility, fig

    def analyze_stock(self, ticker: str, country: str = 'India', include_options: bool = False) -> Dict[str, Union[float, pd.Series]]:
        """Comprehensive stock analysis"""
        data = self.market_data.get_stock_data(ticker, self.config.default_period)
        if data is None:
            return {}

        price_data = data['Adj Close'] if 'Adj Close' in data.columns else data['Close']
        sharpe, annual_return, annual_vol = self.calculate_returns_metrics(price_data, country)
        hist_vol, vol_plot = self.calculate_volatility(price_data)

        analysis = {
            'current_price': price_data.iloc[-1],
            'sharpe_ratio': sharpe,
            'annual_return': annual_return,
            'annual_volatility': annual_vol,
            'historical_volatility': hist_vol,
            'risk_free_rate': self.market_data.get_risk_free_rate(country),
            'volatility_plot': vol_plot
        }

        if include_options:
            # Get option chain data from yfinance
            stock = yf.Ticker(ticker)
            options = stock.options
            if options:
                nearest_expiry = options[0]
                chain = stock.option_chain(nearest_expiry)
                # Add some basic options analysis
                analysis['options'] = {
                    'nearest_expiry': nearest_expiry,
                    'call_volume': chain.calls['volume'].sum(),
                    'put_volume': chain.puts['volume'].sum(),
                    'put_call_ratio': chain.puts['volume'].sum() / chain.calls['volume'].sum()
                }

        return analysis

st.set_page_config(page_title="Stock Price Prediction", layout="wide")

def main():
    config = StockAnalysisConfig(
        fred_api_key='27982b8033b09fa32648865ef7ee3978',
        default_risk_free_rate=0.07,
        volatility_window=30
    )
    
    analyzer = StockAnalyzer(config)
    
    st.title("Advanced Stock Price Prediction")
    st.write("""
    This app predicts stock prices using a combination of financial analysis and an ensemble of machine learning models including LSTM, 
    Gradient Boosting, Random Forest, and SVR.
    """)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        ticker = st.text_input("Enter a stock ticker (e.g., AAPL)").upper()
        prediction_days = st.slider("Number of days to predict", 7, 30, 30)
    
    with col2:
        start_date = st.date_input(
            "Start date",
            value=datetime.now() - timedelta(days=365)
        )
        end_date = st.date_input(
            "End date",
            value=datetime.now()
        )
    
    with col3:
        country = st.selectbox("Select Country", ["India", "USA"], index=0)
    
    if st.button("Predict"):
        if not ticker:
            st.warning("Please enter a stock ticker.")
            return
            
        try:
            with st.spinner(f"Processing {ticker}..."):
                # Stock Analysis
                st.write("Financial Analysis...")
                analysis = analyzer.analyze_stock(ticker, country, include_options=True)
                if not analysis:
                    st.warning(f"No data found for {ticker}")
                    return
                
                st.write(f"Current Price: â‚¹{analysis['current_price']:.2f}")
                st.write(f"Sharpe Ratio: {analysis['sharpe_ratio']:.2f}")
                st.write(f"Annual Return: {analysis['annual_return']*100:.2f}%")
                st.write(f"Annual Volatility: {analysis['annual_volatility']*100:.2f}%")
                st.write(f"Risk-Free Rate: {analysis['risk_free_rate']*100:.2f}%")
                st.pyplot(analysis['volatility_plot'])
                
                if 'options' in analysis:
                    st.write("Options Analysis:")
                    st.write(f"Nearest Expiry: {analysis['options']['nearest_expiry']}")
                    st.write(f"Put/Call Ratio: {analysis['options']['put_call_ratio']:.2f}")

        except Exception as e:
            st.error(f"An error occurred: {str(e)}")
            st.write("Please check if the ticker and dates are valid.")

if __name__ == "__main__":
    main()
